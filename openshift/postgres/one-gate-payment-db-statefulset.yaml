apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-statefulset
  namespace: one-gate-payment
  labels:
    app: one-gate-payment-db
    component: database
spec:
  serviceName: postgresql-service
  replicas: 1
  selector:
    matchLabels:
      app: one-gate-payment-db
  template:
    metadata:
      labels:
        app: one-gate-payment-db
        component: database
    spec:
      containers:
        - name: postgresql
          image: postgres:17-alpine  # Use specific version for production
          imagePullPolicy: IfNotPresent

          # Environment variables from secret
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_DB
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata

          # Resource limits and requests
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # Ports
          ports:
            - containerPort: 5432
              name: postgresql
              protocol: TCP

          # Volume mounts
          volumeMounts:
            - name: postgresql-storage
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config-volume
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
              readOnly: true

          # Health checks
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          # Startup probe for initial database setup
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 -p 5432
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30

        # Flyway sidecar container for database migrations
        - name: flyway
          image: flyway/flyway:10-alpine

          # Flyway command arguments
          args:
            - -url=jdbc:postgresql://localhost:5432/one_gate_payment
            - -user=developer
            - -password=developer123
            - -locations=filesystem:/flyway/sql
            - -validateMigrationNaming=true
            - -baselineOnMigrate=true
            - -connectRetries=60
            - -connectRetriesInterval=1
            - migrate

          # Environment variables
          env:
            - name: FLYWAY_URL
              value: "jdbc:postgresql://localhost:5432/one_gate_payment"
            - name: FLYWAY_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_USER
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_PASSWORD
            - name: FLYWAY_LOCATIONS
              value: "filesystem:/flyway/sql"
            - name: FLYWAY_BASELINE_ON_MIGRATE
              value: "true"
            - name: FLYWAY_VALIDATE_MIGRATION_NAMING
              value: "true"
            - name: FLYWAY_CONNECT_RETRIES
              value: "60"
            - name: FLYWAY_CONNECT_RETRIES_INTERVAL
              value: "1"

          # Resource limits for flyway sidecar
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"

          # Volume mounts for flyway migrations
          volumeMounts:
            - name: flyway-migrations-volume
              mountPath: /flyway/sql
              readOnly: true

          # Lifecycle hook to ensure flyway runs after postgres is ready
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    echo "Waiting for PostgreSQL to be ready before starting Flyway..."
                    until nc -z localhost 5432; do
                      echo "PostgreSQL not ready yet, waiting..."
                      sleep 2
                    done
                    echo "PostgreSQL is ready, Flyway will start migrations..."

      # Volumes
      volumes:
        - name: postgresql-config-volume
          configMap:
            name: postgresql-config
        - name: flyway-migrations-volume
          configMap:
            name: flyway-migrations

  # Volume claim template for persistent storage
  volumeClaimTemplates:
    - metadata:
        name: postgresql-storage
        labels:
          app: one-gate-payment-db
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        # Use default storage class or specify one suitable for your cluster
        # storageClassName: fast-ssd

---
# Service for one gate payment database
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: one-gate-payment
  labels:
    app: one-gate-payment-db
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
  selector:
    app: one-gate-payment-db
