---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: jenkins-podman-scc
  annotations:
    kubernetes.io/description: "Custom SCC for Jenkins with rootless Podman support"
allowPrivilegedContainer: false
allowPrivilegeEscalation: false
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowedCapabilities:
  - SETUID
  - SETGID
defaultAddCapabilities: []
requiredDropCapabilities:
  - KILL
  - MKNOD
readOnlyRootFilesystem: false
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
fsGroup:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - secret
  - projected
users: []
groups: []
priority: 10
---
apiVersion: v1
kind: Secret
metadata:
  name: kubeconfig-secret
  namespace: jenkins
type: Opaque
data:
  config: 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-podman
  namespace: jenkins
automountServiceAccountToken: true
---
# RBAC permissions for Jenkins to interact with OpenShift
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
    verbs: ["*"]
  - apiGroups: ["apps"]
    resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
    verbs: ["*"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["*"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes"]
    verbs: ["*"]
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: ["jenkins-podman-scc"]
    verbs: ["use"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: jenkins-podman
    namespace: jenkins
roleRef:
  kind: ClusterRole
  name: jenkins-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
      annotations:
        openshift.io/scc: jenkins-podman-scc
        security.openshift.io/scc.podSecurityLabelSync: "false"
    spec:
      serviceAccountName: jenkins-podman
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: setup-kubeconfig
          image: busybox:latest
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          command:
            - /bin/sh
            - -c
            - |
              # Setup kubeconfig
              mkdir -p /var/jenkins_home/.kube
              cp /tmp/kubeconfig-secret/config /var/jenkins_home/.kube/config
              chmod 600 /var/jenkins_home/.kube/config
              
              # Setup SSH keys
              mkdir -p /var/jenkins_home/.ssh
              if [ -f /tmp/ssh-keys/id_ed25519 ]; then
                cp /tmp/ssh-keys/id_ed25519 /var/jenkins_home/.ssh/id_ed25519
                chmod 600 /var/jenkins_home/.ssh/id_ed25519
              fi
              if [ -f /tmp/ssh-keys/id_ed25519.pub ]; then
                cp /tmp/ssh-keys/id_ed25519.pub /var/jenkins_home/.ssh/id_ed25519.pub
                chmod 644 /var/jenkins_home/.ssh/id_ed25519.pub
              fi
              if [ -f /tmp/ssh-keys/known_hosts ]; then
                cp /tmp/ssh-keys/known_hosts /var/jenkins_home/.ssh/known_hosts
                chmod 644 /var/jenkins_home/.ssh/known_hosts
              fi
              
              # Set ownership
              chown -R 1000:1000 /var/jenkins_home/.ssh
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: kubeconfig-secret-volume
              mountPath: /tmp/kubeconfig-secret
              readOnly: true
            - name: ssh-keys-volume
              mountPath: /tmp/ssh-keys
              readOnly: true
      containers:
        - name: jenkins
          image: fajrarisqulla/jenkins-openshift:latest
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - SETUID
                - SETGID
              drop:
                - ALL
            runAsUser: 1000
            runAsGroup: 1000
          env:
            - name: JAVA_OPTS
              value: "-Djenkins.install.runSetupWizard=false -Xmx4g -Xms2g"
            - name: KUBECONFIG
              value: "/var/jenkins_home/.kube/config"
            - name: BUILDAH_ISOLATION
              value: "chroot"
            - name: STORAGE_DRIVER
              value: "vfs"
            - name: REGISTRY_AUTH_FILE
              value: "/var/jenkins_home/.config/containers/auth.json"
          ports:
            - name: web
              containerPort: 8080
            - name: agent
              containerPort: 50000
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-pvc
        - name: kubeconfig-secret-volume
          secret:
            secretName: kubeconfig-secret
            items:
              - key: config
                path: config
        - name: ssh-keys-volume
          secret:
            secretName: jenkins-ssh-keys
            defaultMode: 0600
            items:
              - key: id_ed25519
                path: id_ed25519
                mode: 0600
              - key: id_ed25519.pub
                path: id_ed25519.pub
                mode: 0644
              - key: known_hosts
                path: known_hosts
                mode: 0644
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  selector:
    app: jenkins
  ports:
    - name: web
      port: 8080
      targetPort: web
      protocol: TCP
    - name: agent
      port: 50000
      targetPort: agent
      protocol: TCP
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  to:
    kind: Service
    name: jenkins
  port:
    targetPort: web
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect